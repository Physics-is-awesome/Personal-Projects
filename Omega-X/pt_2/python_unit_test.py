#!/usr/bin/env python3
# python_unit_test.py
# Requires: numpy, sympy
import numpy as np
import sympy as sp
import importlib
import sys

# parameters (must match those in generator if you used substitution)
Cv = 1.0
gamma = 1.4

# Import f2py-built module: modulename used in compile.sh
MODNAME = 'metriplectic_pointwise_py'
try:
    mod = importlib.import_module(MODNAME)
except Exception as e:
    print("Error importing Fortran f2py module. Did you run ./compile.sh ?")
    print(e)
    sys.exit(1)

# define symbols and expressions same as generator
rho, m, sigma, mu, kappa, u_x, u_xx, T_x, T_xx = sp.symbols('rho m sigma mu kappa u_x u_xx T_x T_xx')
s = sigma / rho
U_expr = Cv * sp.exp(s / Cv) * rho**(gamma - 1) / (gamma - 1)

h_sub = m**2/(2*rho) + rho * U_expr.subs(s, s)
dH_dm = sp.simplify(sp.diff(h_sub, m))
dH_dsigma = sp.simplify(sp.diff(h_sub, sigma))
dH_drho = sp.simplify(sp.diff(h_sub, rho))
T_expr = sp.simplify(sp.diff(U_expr, s).subs(s, s))
p_expr = sp.simplify(rho**2 * sp.diff(U_expr, rho).subs(s, s))
F_rho = sp.simplify(rho * (m / rho))
F_m_adv = sp.simplify(m * (m / rho))
F_sigma = sp.simplify(sigma * (m / rho))
viscous_prefactor = sp.simplify(mu * u_x)
kappa_over_T = sp.simplify(kappa / T_expr)
source_viscous = sp.simplify((mu / T_expr) * u_x**2)
kappa_Txx_part = sp.simplify(kappa_over_T * T_xx)
kappa_Tgrad2 = sp.simplify((kappa / (T_expr**2)) * T_x**2)

# lambdify functions
f_dH_dm = sp.lambdify((rho,m,sigma), dH_dm, 'numpy')
f_dH_dsigma = sp.lambdify((rho,m,sigma), dH_dsigma, 'numpy')
f_dH_drho = sp.lambdify((rho,m,sigma), dH_drho, 'numpy')
f_T = sp.lambdify((rho,m,sigma), T_expr, 'numpy')
f_p = sp.lambdify((rho,m,sigma), p_expr, 'numpy')
f_F_rho = sp.lambdify((rho,m,sigma), F_rho, 'numpy')
f_F_m_adv = sp.lambdify((rho,m,sigma), F_m_adv, 'numpy')
f_F_sigma = sp.lambdify((rho,m,sigma), F_sigma, 'numpy')
f_visc_pf = sp.lambdify((mu,u_x), viscous_prefactor, 'numpy')
f_kappa_over_T = sp.lambdify((kappa,rho,m,sigma), kappa_over_T, 'numpy')
f_source_viscous = sp.lambdify((mu,u_x,kappa,rho,m,sigma), source_viscous, 'numpy')
f_kappa_Txx_part = sp.lambdify((kappa,rho,m,sigma,T_xx), kappa_Txx_part, 'numpy')
f_kappa_Tgrad2 = sp.lambdify((kappa,rho,m,sigma,T_x), kappa_Tgrad2, 'numpy')

# pick random sample inputs
rng = np.random.default_rng(12345)
rho_v = 1.0 + rng.random(5)
m_v = 0.1 + rng.random(5)
sigma_v = 0.1 + rng.random(5)
mu_v = 1e-2
kappa_v = 2e-2
u_x_v = 0.05
u_xx_v = 0.005
T_x_v = 0.02
T_xx_v = 0.002

tol = 1e-12

for i in range(len(rho_v)):
    r = float(rho_v[i]); mm = float(m_v[i]); ss = float(sigma_v[i])
    # sympy numeric
    a1 = float(f_dH_dm(r,mm,ss))
    a2 = float(f_dH_dsigma(r,mm,ss))
    a3 = float(f_dH_drho(r,mm,ss))
    aT = float(f_T(r,mm,ss))
    ap = float(f_p(r,mm,ss))
    aFr = float(f_F_rho(r,mm,ss))
    aFm = float(f_F_m_adv(r,mm,ss))
    aFs = float(f_F_sigma(r,mm,ss))
    avpf = float(f_visc_pf(mu_v,u_x_v))
    akT = float(f_kappa_over_T(kappa_v,r,mm,ss))
    asv = float(f_source_viscous(mu_v,u_x_v,kappa_v,r,mm,ss))
    akTxx = float(f_kappa_Txx_part(kappa_v,r,mm,ss,T_xx_v))
    akTg2 = float(f_kappa_Tgrad2(kappa_v,r,mm,ss,T_x_v))

    # Fortran via f2py module functions (names as generated by f2py might have suffixes; attempt to access)
    # Module name: 'metriplectic_pointwise_py' - functions are available as attributes with original names
    try:
        b1 = getattr(mod, 'dH_dm_pt')(r,mm,ss)
        b2 = getattr(mod, 'dH_dsigma_pt')(r,mm,ss)
        b3 = getattr(mod, 'dH_drho_pt')(r,mm,ss)
        bT = getattr(mod, 'T_pt')(r,mm,ss)
        bp = getattr(mod, 'p_pt')(r,mm,ss)
        bFr = getattr(mod, 'F_rho_pt')(r,mm,ss)
        bFm = getattr(mod, 'F_m_adv_pt')(r,mm,ss)
        bFs = getattr(mod, 'F_sigma_pt')(r,mm,ss)
        bvpf = getattr(mod, 'viscous_prefactor_pt')(mu_v, u_x_v)
        bkT = getattr(mod, 'kappa_over_T_pt')(kappa_v, r, mm, ss)
        bsv = getattr(mod, 'source_viscous_pt')(mu_v, u_x_v, kappa_v, r, mm, ss)
        bkTxx = getattr(mod, 'kappa_Txx_part_pt')(bkT, T_xx_v)
        bkTg2 = getattr(mod, 'kappa_Tgrad2_pt')(kappa_v, bT, T_x_v)
    except Exception as e:
        print("Error calling Fortran functions from f2py module:", e)
        raise

    # comparisons
    np.testing.assert_allclose(a1, b1, rtol=1e-12, atol=1e-12)
    np.testing.assert_allclose(a2, b2, rtol=1e-12, atol=1e-12)
    np.testing.assert_allclose(a3, b3, rtol=1e-12, atol=1e-12)
    np.testing.assert_allclose(aT, bT, rtol=1e-12, atol=1e-12)
    np.testing.assert_allclose(ap, bp, rtol=1e-12, atol=1e-12)
    np.testing.assert_allclose(aFr, bFr, rtol=1e-12, atol=1e-12)
    np.testing.assert_allclose(aFm, bFm, rtol=1e-12, atol=1e-12)
    np.testing.assert_allclose(aFs, bFs, rtol=1e-12, atol=1e-12)
    np.testing.assert_allclose(avpf, bvpf, rtol=1e-12, atol=1e-12)
    np.testing.assert_allclose(akT, bkT, rtol=1e-12, atol=1e-12)
    np.testing.assert_allclose(asv, bsv, rtol=1e-12, atol=1e-12)
    np.testing.assert_allclose(akTxx, bkTxx, rtol=1e-12, atol=1e-12)
    np.testing.assert_allclose(akTg2, bkTg2, rtol=1e-12, atol=1e-12)

print("All symbolic <-> Fortran checks passed.")
